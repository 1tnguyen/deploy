<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Developer Guide on AIDE-QC</title><link>https://aide-qc.github.io/deploy/developers/</link><description>Recent content in Developer Guide on AIDE-QC</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 29 Nov 2019 15:26:15 +0000</lastBuildDate><atom:link href="https://aide-qc.github.io/deploy/developers/index.xml" rel="self" type="application/rss+xml"/><item><title>Implement a new Circuit Synthesis Strategy</title><link>https://aide-qc.github.io/deploy/developers/implement_circuit_synthesis/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://aide-qc.github.io/deploy/developers/implement_circuit_synthesis/</guid><description>Here we describe how developers can extend the AIDE-QC stack with support for a new circuit synthesis strategy. We define circuit synthesis at the black-box level: a unitary matrix goes in and a list of one and two qubit gates come out.
To understand the class architecture for circuit synthesis strategies, it is important to understand the internal intermediate representation that AIDE-QC leverages for compiled quantum kernels. AIDE-QC builds upon the XACC intermediate representation, which exposes Instruction and CompositeInstruction abstract classes that are intended for subclassing for concrete instruction types and collections of concrete instructions.</description></item><item><title>Implement a new Optimizer</title><link>https://aide-qc.github.io/deploy/developers/implement_optimizer/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://aide-qc.github.io/deploy/developers/implement_optimizer/</guid><description>Table of Contents Background Create a Custom L-BFGS Optimizer Test the Custom L-BFGS Optimizer Custom Optimizer Options Background The AIDE-QC software stack provides an extension point for classical, multi-variate function optimization. This provides the means to experiment with multiple optimization strategies pertinent to variational quantum computing algorithms (e.g. VQE).
We describe optimization via an extensible Optimizer class. The essential structure of the Optimizer infrastructure is shown below</description></item><item><title>Implement a new QSim Workflow</title><link>https://aide-qc.github.io/deploy/developers/implement_qsim_workflow/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://aide-qc.github.io/deploy/developers/implement_qsim_workflow/</guid><description>QSim is a domain-specific library for quantum simulation in the AIDE-QC software stack. The key extension point of QSim is its QuantumSimulationWorkflow interface, which is essentially the simulation driver for different protocols/procedures. Please refer to this page for more information about QSim and its components.
Besides its built-in workflow implementations (e.g. vqe, qaoa, etc.), users/developers may want to implement a new workflow (as a plugin) and contribute to the AIDE-QC stack.</description></item><item><title>QCOR Clang Syntax Handler</title><link>https://aide-qc.github.io/deploy/developers/clang_syntax/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://aide-qc.github.io/deploy/developers/clang_syntax/</guid><description/></item></channel></rss>