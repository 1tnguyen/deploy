<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Developer Guide on AIDE-QC</title><link>https://aide-qc.github.io/deploy/developers/</link><description>Recent content in Developer Guide on AIDE-QC</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 29 Nov 2019 15:26:15 +0000</lastBuildDate><atom:link href="https://aide-qc.github.io/deploy/developers/index.xml" rel="self" type="application/rss+xml"/><item><title>Add a New Circuit Synthesis Strategy</title><link>https://aide-qc.github.io/deploy/developers/implement_circuit_synthesis/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://aide-qc.github.io/deploy/developers/implement_circuit_synthesis/</guid><description>Here we describe how developers can extend the AIDE-QC stack with support for a new circuit synthesis strategy.
We define circuit synthesis at the black-box level: a unitary matrix goes in and a list of one and two
qubit gates come out.
Background To understand the class architecture for circuit synthesis strategies, it is important to understand the
internal intermediate representation that AIDE-QC leverages for compiled quantum kernels. AIDE-QC builds upon</description></item><item><title>Add a New Optimizer</title><link>https://aide-qc.github.io/deploy/developers/implement_optimizer/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://aide-qc.github.io/deploy/developers/implement_optimizer/</guid><description>Table of Contents Background Create a Custom L-BFGS Optimizer Test the Custom L-BFGS Optimizer Custom Optimizer Options Background The AIDE-QC software stack provides an extension point for classical, multi-variate function optimization. This provides the means
to experiment with multiple optimization strategies pertinent to variational quantum computing algorithms (e.g. VQE).
We describe optimization via an extensible Optimizer class. The essential structure of the Optimizer infrastructure is shown below</description></item><item><title>Add a New Quantum Backend</title><link>https://aide-qc.github.io/deploy/developers/implement_accelerator/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://aide-qc.github.io/deploy/developers/implement_accelerator/</guid><description>Here we detail how one might inject a new simulator or physical backend into the AIDE-QC software stack. The process for doing this is
via the implementation of a new xacc::Accelerator sub-class, and its contribution to the stack as a new plugin library.
Background class Accelerator : public Identifiable { public: virtual void initialize(const HeterogeneousMap &amp;amp;params = {}) = 0; virtual void updateConfiguration(const HeterogeneousMap &amp;amp;config) = 0; virtual const std::vector&amp;lt;std::string&amp;gt; configurationKeys() = 0; virtual HeterogeneousMap getProperties(); virtual std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt;&amp;gt; getConnectivity(); // Execute a single program.</description></item><item><title>Add a New QuaSiMo Workflow</title><link>https://aide-qc.github.io/deploy/developers/implement_quasimo_workflow/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://aide-qc.github.io/deploy/developers/implement_quasimo_workflow/</guid><description>QuaSiMo is a domain-specific library for quantum simulation in the AIDE-QC software stack.
The key extension point of QuaSiMo is its QuantumSimulationWorkflow interface, which is essentially the simulation driver for different protocols/procedures. Please refer to this page for more information about QuaSiMo and its components.
Besides its built-in workflow implementations (e.g. vqe, qaoa, etc.), users/developers may want to implement a new workflow (as a plugin) and contribute to the AIDE-QC stack.</description></item><item><title>Hybrid C++ / Python Plugins</title><link>https://aide-qc.github.io/deploy/developers/implement_plugin_embedded_python/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://aide-qc.github.io/deploy/developers/implement_plugin_embedded_python/</guid><description>Background In this article, we will demonstrate how one might integrate python code as a new plugin with the C++ AIDE-QC stack, thereby making
it available for use with the C++ and Python AIDE-QC API. We have shown this in a cursory way in the Add a New Quantum Backend article. Here we devote a bit more time to the pybind11 bindings, and the requirements for ensuring a working
plugin for use in C++ and Python.</description></item><item><title/><link>https://aide-qc.github.io/deploy/developers/clang_syntax/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aide-qc.github.io/deploy/developers/clang_syntax/</guid><description/></item></channel></rss>